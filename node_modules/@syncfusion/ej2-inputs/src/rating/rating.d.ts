import { BaseEventArgs, Component, EmitType, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { RatingModel } from './rating-model';
/**
 * Defines the position of the label in the rating.
 */
export declare enum LabelPosition {
    /**
     * Shows the label above the rating.
     */
    Top = "Top",
    /**
     * Shows the label below the rating.
     */
    Bottom = "Bottom",
    /**
     * Shows the label to the left of rating.
     */
    Left = "Left",
    /**
     * Shows the label to the right of rating.
     */
    Right = "Right"
}
/**
 * Defines the minimum increase in the value in Rating Control.
 */
export declare enum PrecisionType {
    /**
     * Process the value as whole numbers.
     */
    Full = "Full",
    /**
     * Process the value in terms of 0.5 (half).
     */
    Half = "Half",
    /**
     * Process the value in terms of 0.25 (quarter).
     */
    Quarter = "Quarter",
    /**
     * Process the value in terms of 0.1.
     */
    Exact = "Exact"
}
/**
 * Event triggers whenever the value changes.
 */
export interface RatingChangedEventArgs extends BaseEventArgs {
    /**
     * Provides the original event
     */
    event: Event;
    /**
     * Provides whether the change is triggered by user interaction.
     */
    isInteracted: boolean;
    /**
     * Provides the previous value.
     */
    previousValue: number;
    /**
     * Provides the current value.
     */
    value: number;
}
/**
 * Event triggers whenever a new item is hovered.
 */
export interface RatingHoverEventArgs extends BaseEventArgs {
    /**
     * Provides the hovered item element.
     */
    element: HTMLElement;
    /**
     * Provides the original event.
     */
    event: Event;
    /**
     * Provides the current value of the hovered item.
     */
    value: number;
}
/**
 * Event triggers before rendering each item.
 */
export interface RatingItemEventArgs extends BaseEventArgs {
    /**
     * Html element of the current item to be rendered.
     */
    element: HTMLElement;
    /**
     * Provides the place value of the item.
     */
    value: number;
}
export declare class Rating extends Component<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Defines whether to show or hide the reset button.
     * If min is not zero, then reset button won’t be displayed regardless of allowReset value.
     *
     * @default false
     */
    allowReset: boolean;
    /**
     * Defines the CSS class to customize the rating appearance.
     *
     * @default ''
     */
    cssClass: string;
    /**
     * Defines whether the rating is enabled or disabled.
     *
     * @default false
     */
    disabled: boolean;
    /**
     * Defines whether to add animation when an item is hovered.
     *
     * @default true
     */
    enableAnimation: boolean;
    /**
     * Defines the template content for each item when it is not selected.
     * The template context will contain the current item value for customization.
     *
     * @default ''
     */
    emptyTemplate: string;
    /**
     * Defines whether to enable single selection like radio button or not.
     * If not enabled all the items before the selected item will also be in the selected state.
     *
     * @default false
     */
    enableSingleSelection: boolean;
    /**
     * Defines the template content for each item when it is selected.
     * The template context will contain the current item value for customization.
     *
     * @default ''
     */
    fullTemplate: string;
    /**
     * Defines the number of rating items.
     *
     * @default 5
     * @aspType int
     */
    itemsCount: number;
    /**
     * Defines the position of the label in the rating.
     * *Top
     * *Bottom
     * *Left
     * *Right
     *
     * @isenumeration true
     * @default LabelPosition.Right
     * @asptype LabelPosition
     */
    labelPosition: string | LabelPosition;
    /**
     * Defines the template content for the label.
     * The template context will contain the current value and maximum value for customization.
     *
     * @default ''
     */
    labelTemplate: string;
    /**
     * Defines the minimum value of the rating.
     *
     * @default 0.0
     * @aspType double
     */
    min: number;
    /**
     * Defines the minimum increase in the value.
     * *Full
     * *Half
     * *Quarter
     * *Exact
     *
     * @isenumeration true
     * @default PrecisionType.Full
     * @asptype PrecisionType
     */
    precision: string | PrecisionType;
    /**
     * Defines whether the read only mode is enabled or not where interaction is disabled without any UI change.
     *
     * @default false
     */
    readOnly: boolean;
    /**
     * Defines whether to show a label which display the current value.
     *
     * @default false
     */
    showLabel: boolean;
    /**
     * Defines whether to show tooltip for the items.
     *
     * @default true
     */
    showTooltip: boolean;
    /**
     * Defines the template content for the tooltip.
     * The template context will contain the current value for customization.
     *
     * @default ''
     */
    tooltipTemplate: string;
    /**
     * Defines the rating value.
     *
     * @default 0.0
     * @aspType double
     */
    value: number;
    /**
     * Defines whether the rating is visible or hidden.
     *
     * @default true
     */
    visible: boolean;
    /**
     * Event triggers before rendering each item.
     *
     * @event beforeItemRender
     */
    beforeItemRender: EmitType<RatingItemEventArgs>;
    /**
     * Event triggers after the creation of Rating.
     *
     * @event created
     */
    created: EmitType<Event>;
    /**
     * Event triggers whenever a new item is hovered.
     *
     * @event onItemHover
     */
    onItemHover: EmitType<RatingHoverEventArgs>;
    /**
     * Event triggers whenever the value changes.
     *
     * @event valueChanged
     */
    valueChanged: EmitType<RatingChangedEventArgs>;
    private wrapper;
    private ratingItemList;
    private spanLabel;
    private itemElements;
    private resetElement;
    private keyboardModuleRating;
    private keyConfigs;
    private tooltipObj;
    private currentValue;
    private emptyTemplateFunction;
    private fullTemplateFunction;
    private tooltipOpen;
    /**
     * Constructor for creating the widget
     *
     * @param  {RatingModel} options - Specifies the rating model
     * @param  {string|HTMLButtonElement} element - Specifies the target element
     */
    constructor(options?: RatingModel, element?: string | HTMLInputElement);
    protected preRender(): void;
    render(): void;
    private initialize;
    private updateDisabled;
    private updateResetButton;
    private renderItemList;
    private touchMoveHandler;
    private touchEndHandler;
    private updateTemplateFunction;
    private renderItems;
    private renderItemContent;
    private removeItemContent;
    private updateTooltip;
    private updateMinValue;
    private updatePrecision;
    private validateValue;
    private getRatingValue;
    private updateItemValue;
    private updateItemContent;
    private updateTooltipContent;
    private getTemplateString;
    private displayLabel;
    private updateLabel;
    private updateReset;
    private updateLabelPosition;
    private clearLabelPosition;
    private wireItemsEvents;
    private clickHandler;
    private triggerChange;
    private mouseMoveHandler;
    private openRatingTooltip;
    private closeRatingTooltip;
    private updateCurrentValue;
    private mouseLeaveHandler;
    private calculateCurrentValue;
    /**
     * Reset’s the value to minimum.
     *
     * @returns {void}
     */
    reset(): void;
    private resetClicked;
    private wireKeyboardEvent;
    private keyActionHandler;
    private handleNavigation;
    private updateContent;
    /**
     * To get component name.
     *
     * @returns {string} - Module Name
     * @private
     */
    getModuleName(): string;
    /**
     * To get the properties to be maintained in the persisted state.
     *
     * @returns {string} - Persist data
     */
    protected getPersistData(): string;
    private removeItemElements;
    /**
     * Destroys the Rating instance.
     *
     * @returns {void}
     */
    destroy(): void;
    /**
     * Called internally if any of the property value changed.
     *
     * @param  {RatingModel} newProp - Specifies new properties
     * @param  {RatingModel} oldProp - Specifies old properties
     * @returns {void}
     * @private
     */
    onPropertyChanged(newProp: RatingModel, oldProp?: RatingModel): void;
}
